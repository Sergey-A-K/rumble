<link href="../rumblelua2.css" rel="stylesheet" type="text/css" />
<?
domain = session.section;
acc = nil;
update = "0";
if (not (session.credentials.admin or session.credentials.domains[domain])) then
	printf("<div class='notification'>You need admin priveledges to access this page!</div>");
	return;
end
if (http.form.u) then
	acc = Mailman.readAccount(tonumber(http.form.u));
	if ( acc ) then
		http.form.update = "1";
	end
end

if (http.form.d) then
	acc = Mailman.readAccount(tonumber(http.form.d));
	if ( acc ) then
		Mailman.deleteAccount(tonumber(http.form.d));
		printf("<tr><td><b><font color='red'>Deleted account %s@%s.</font></b></td></tr>", acc.name, domain);
	end
end    

if (http.form.user) then
	if (http.form.update == "1") then

		local bad = nil;
		if (http.form.type ~= acc.type) then
			bad = "You cannot change the type of an account, as it could cause a bad case of email backlogging. To change your email address to a new account type, first delete your old account and then create the new one.";
		end
		
		if (bad) then printf("<b>Error:</b> %s", bad);
		else 
			acc.name = http.form.user;
			if (http.form.password) then acc.password = http.form.password:SHA256(); end
			if (acc.type == "alias") then acc.arguments = http.form.alias; end
			if (acc.type == "mod") then acc.arguments = http.form.mod; end
			if (acc.type == "feed") then acc.arguments = http.form.feed; end
			if (acc.type == "relay") then acc.arguments = http.form.relay; end
			Mailman.saveAccount(acc);
			printf("Account %s@%s successfully updated.", acc.name, acc.domain);
			acc = nil;
		end
	else
		if (Mailman.accountExists(domain, http.form.user)) then
			printf("<tr><td><b><font color='red'>Error: Account %s@%s already exists!</font></b></td></tr>", http.form.user, domain);
		else
			local acc = {};
			acc.name = http.form.user;
			acc.domain = domain;
			acc.type = http.form.type or "mbox";
			acc.password = (http.form.password or ""):SHA256();
			if (http.form.type == "alias") then acc.arguments = http.form.alias; end
			if (http.form.type == "mod") then acc.arguments = http.form.mod; end
			if (http.form.type == "feed") then acc.arguments = http.form.feed; end
			if (http.form.type == "relay") then acc.arguments = http.form.relay; end
			acc.arguments = acc.arguments or "";
			Mailman.saveAccount(acc);
			printf("<tr><td><b><font color='darkgreen'>Account %s@%s has been created.</font></b></td></tr>", http.form.user, domain);
		end
	end
end

?><style type="text/css">
.create_mailbox_tab {
/*	background-color: #8AAFCE;*/
	background-image: url(../tabs_default.png);
	height: 23px;
	width: 118px;
	font-size:11px;
	font-weight: bold;
	text-align:center;
}
.create_mailbox_tab a {
	color:#FFFFCC;
	text-decoration:none;
}
.create_mailbox_tab:hover {
	background-image: url(../tabs_hover.png);
}
.create_mailbox_tab_selected {
	background-image: url(../tabs_selected.png);
	height: 23px;
	width: 118px;
	font-size:11px;
	font-weight: bold;
		text-align:center;
}
.create_mailbox_tab_selected a {
	color:#FFFFCC;
	text-decoration:none;
}

.useraccount {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	background-color: #D3D3C0;
	border: 1px solid #333;
	margin: auto;
	width: 600px;
}
</style>

<h2>Accounts @ <?=domain?></h2>
<p align="center">
<h4 align="center"><?=(http.form.u and "Edit") or "Create a new"?> account:</h4>
<form id="crform" name="form1" method="post" action="">
<input type="hidden" name="type" value="mbox"/>
<input type="hidden" name="update" value="<?=http.form.update?>"/>
<input type="hidden" name="u" value="<?=http.form.u?>"/>
<table border="0" cellpadding="1" cellspacing="0" width="600px" style="margin: 0px auto;">
  <tr>
    <td width="146" class="create_mailbox_tab" id="cr_mbox"><img src="..//icons/email.png" width="16" height="16" align="absmiddle" /> <a href="#" onclick="changeForm('mbox');">Email account</a></td>
    <td width="125" class="create_mailbox_tab" id="cr_alias"><img src="../icons/email_go.png" alt="" width="16" height="16" align="absmiddle" /> <a href="#" onclick="changeForm('alias');">Email alias</a></td>
    <td width="138" class="create_mailbox_tab" id="cr_mod"><img src="../icons/plugin_go.png" alt="" width="16" height="16" align="absmiddle" /> <a href="#" onclick="changeForm('mod');">Feed to module</a></td>
    <td colspan="2" class="create_mailbox_tab" id="cr_feed"><img src="../icons/computer_add.png" alt="" width="16" height="16" align="absmiddle" /> <a href="#" onclick="changeForm('feed');">Feed to program</a></td>
    <td colspan="2" class="create_mailbox_tab" id="cr_relay"><img src="../icons/computer_add.png" alt="" width="16" height="16" align="absmiddle" /> <a href="#" onclick="changeForm('relay');">Relay</a></td>
  </tr>
  </table>
  <table border="0" cellpadding="1" cellspacing="0" width="600px" class="useraccount">
  <tr>
    <td colspan="6">
    <div style="display:none;" id="cr_desc_mbox">Enter the desired username and password below to create a standard mailbox.<br />
      The new mailbox will be ready for use instantly.</div>
    <div style="display:none;" id="cr_desc_alias">An alias is an email account that forwards all messages to a different account.<br />
      A popular choice is to create a <i>catch-all</i> account that forwards all emails sent to your domain. <br />
      You can create a catch-all alias by setting the username to "<strong>*</strong>".
    </div>
    <div style="display:none;" id="cr_desc_mod">
      If you have installed a module that reads and processes letters, you can create an email address for it here.<br />
      All mail sent to this address will then be passed on to the module.<br />
      This type of account is often used for mailing lists or CRM business.
    </div>
    <div style="display:none;" id="cr_desc_feed">
      This type of account will automatically feed any incoming mail to the program you specify.<br />
      When a letter is received, Rumble will then run the program and send the letter through STDIN.
    </div>
    <div style="display:none; width:600px;" id="cr_desc_relay">
      Albeit an outdated technique, this type of account will force the server to relay messages to another domain through your own domain. This is sometimes used to obfuscate mail paths or prevent spam.
    </div>&nbsp;    </td>
  </tr>
  <tr>
    <td width="149"><strong>Account name:</strong></td>
    <td colspan="5">
      <input name="user" type="text" id="user" maxlength="92" autocomplete="off"/> @ <?=domain?>    </td>
  </tr>
  <tr  style="display:none;"id="cr_field_mbox">
    <td><strong>(new) Password:</strong></td>
    <td colspan="5"><input name="password"  autocomplete="off"type="password" id="user2" maxlength="48" /></td>
    </tr>
  <tr  style="display:none;"id="cr_field_alias">
    <td><strong>Forwarding address(es):</strong></td>
    <td colspan="4"><input name="alias"  autocomplete="off" type="text" id="user3" size="48" maxlength="92" /></td>
    <td width="121">&nbsp;</td>
  </tr>
  <tr  style="display:none;"id="cr_field_mod">
    <td><strong>Module to feed:</strong></td>
    <td colspan="3"><select name="module">
      <?
			for k,mod in pairs(Rumble.listModules()) do
				printf("<option value=\"%s\">%s</option>", mod.file, mod.title);
			end
			?> 
    </select>      &nbsp;</td>
    <td width="284">&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr  style="display:none;"id="cr_field_feed">
    <td><strong>Program to feed:</strong></td>
    <td colspan="4"><input name="feed" type="text" id="user4" size="48" maxlength="92" /></td>
    <td>&nbsp;</td>
  </tr>
  <tr  style="display:none;"id="cr_field_relay">
    <td><strong>Relay host:</strong></td>
    <td colspan="4"><input name="relay" type="text" id="relay" size="48" maxlength="92" /></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td height="47" colspan="6" align="center"><input type="submit" name="Save account" id="Save account" value="Save account" />      <input type="reset" name="Save account2" id="Save account2" value="Reset" 
      onclick="this.form.u.value=''; this.form.update.value='0';"
      /></td>

  </tr>
</table>
</form>
</p>
<p>&nbsp;</p>

<table style="width: 600px;" border='0' cellpadding='5' cellspacing='1' class="elements">
<tr><th width="45">UID</th><th width="295">Account</th><th width="89">Type</th><th width="124">Actions</th></tr>
<?

    local t = Mailman.listAccounts(domain);
    for k,v in pairs(t) do
        printf("<tr><td>%s</td><td><a href='/accounts:%s?u=%u'>%s@%s</a></td><td>%s</td><td> <a href=\"/accounts:%s?u=%u\"><img title='Edit account' src='/icons/report_edit.png' align='absmiddle'/></a> <a href=\"/accounts:%s?d=%u\"><img title='Delete account' src='/icons/action_delete.png' align='absmiddle'/></a></td></tr>", v.id or nil, domain,v.id,v.name,domain,v.type,domain,v.id,domain,v.id,v.type,domain,v.id);
    end
    if (#t == 0) then
        printf("<tr><td colspan='3'><i>%s does not have any mail accounts.</i></td></tr>", domain);
    end
    ?>
</table>	
   
   <script type="application/javascript">
function changeForm(what) {
	var list = new Array('smurf','mbox','alias','mod','feed','relay');
	document.forms['crform'].type.value = what;
	for (i in list) {
		var obj = document.getElementById('cr_' + list[i]);
		var desc = document.getElementById('cr_desc_'+list[i]);
		var field = document.getElementById('cr_field_'+list[i]);

		if (obj) {
			if (list[i] == what) {
				obj.className = 'create_mailbox_tab_selected';
				if (desc) desc.style.display = 'inherit';
				if (field) field.style.display = 'table-row';
			}
			else {
				obj.className = 'create_mailbox_tab';
				if (desc) desc.style.display = 'none';
				if (field) field.style.display = 'none';
			}
		}
	}
}
changeForm('mbox');
<? 

if (http.form.type) then printf("changeForm('%s');", http.form.type); end 

if (acc and acc.type) then
	printf("changeForm('%s');", acc.type);
	printf([[
	document.forms['crform'].user.value = "%s";
	document.forms['crform'].alias.value = "%s";
	document.forms['crform'].feed.value = "%s";
	document.forms['crform'].relay.value = "%s";
	]], acc.name, acc.arguments, acc.arguments, acc.arguments);
end 
?>
</script>
